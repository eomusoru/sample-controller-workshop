/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "lcostea.io/testcontroller/pkg/apis/testcontroller/v1alpha1"
)

// GitSyncLister helps list GitSyncs.
type GitSyncLister interface {
	// List lists all GitSyncs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.GitSync, err error)
	// GitSyncs returns an object that can list and get GitSyncs.
	GitSyncs(namespace string) GitSyncNamespaceLister
	GitSyncListerExpansion
}

// gitSyncLister implements the GitSyncLister interface.
type gitSyncLister struct {
	indexer cache.Indexer
}

// NewGitSyncLister returns a new GitSyncLister.
func NewGitSyncLister(indexer cache.Indexer) GitSyncLister {
	return &gitSyncLister{indexer: indexer}
}

// List lists all GitSyncs in the indexer.
func (s *gitSyncLister) List(selector labels.Selector) (ret []*v1alpha1.GitSync, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GitSync))
	})
	return ret, err
}

// GitSyncs returns an object that can list and get GitSyncs.
func (s *gitSyncLister) GitSyncs(namespace string) GitSyncNamespaceLister {
	return gitSyncNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GitSyncNamespaceLister helps list and get GitSyncs.
type GitSyncNamespaceLister interface {
	// List lists all GitSyncs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.GitSync, err error)
	// Get retrieves the GitSync from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.GitSync, error)
	GitSyncNamespaceListerExpansion
}

// gitSyncNamespaceLister implements the GitSyncNamespaceLister
// interface.
type gitSyncNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GitSyncs in the indexer for a given namespace.
func (s gitSyncNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GitSync, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GitSync))
	})
	return ret, err
}

// Get retrieves the GitSync from the indexer for a given namespace and name.
func (s gitSyncNamespaceLister) Get(name string) (*v1alpha1.GitSync, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("gitsync"), name)
	}
	return obj.(*v1alpha1.GitSync), nil
}
